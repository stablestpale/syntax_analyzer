S -> E
E -> func
func -> type main ( ) func_body
type -> int 
type -> short 
type -> long 
type -> char 
type -> float 
type -> double 
type -> void 
type -> unsigned type
func_body -> ;
func_body -> block
block -> { define_stmts stmts }
define_stmts -> type id init ;
init -> = number
init -> [ num_const ]
stmts -> stmt
stmts -> stmt stmt
stmts -> stmt stmt stmt
stmt -> assign_stmt
stmt -> jump_stmt
stmt -> iteration_stmt
stmt -> branch_stmt
assign_stmt -> expression
jump_stmt -> continue
jump_stmt -> break
jump_stmt -> return isnull_expr
iteration_stmt -> while ( logical_expression ) block_stmt
iteration_stmt -> for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt
iteration_stmt -> do block_stmt while ( logical_expression ) ;
branch_stmt -> if ( logical_expression ) block_stmt else block_stmt
logical_expression -> ! expression bool_expression
logical_expression -> expression bool_expression
bool_expression -> lop expression
lop -> &&
branch_stmt -> switch ( id ) { case_stmt case_stmts default_stmt }
case_stmts -> case_stmt case_stmts
case_stmt -> case const : stmts
default_stmt -> default : stmts
block_stmt -> { stmt ; }
isnull_expr -> expression
expression -> id operation
operation -> compare_op value
operation -> equal_op value
compare_op -> >
compare_op -> >=
compare_op -> <
compare_op -> <=
compare_op -> ==
compare_op -> !=
equal_op -> =
equal_op -> +=
equal_op -> -=
equal_op -> *=
equal_op -> /=
equal_op -> %=
value -> id value'
value -> number
value' -> + id
value' -> - id
call_func -> ( es )
es -> isnull_expr isnull_es
isnull_es -> , isnull_expr isnull_es
const -> number